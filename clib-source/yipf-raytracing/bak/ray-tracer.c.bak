#include "ray-tracer.h"
#include <math.h>
#include <stdlib.h>
#include <string.h>

int show_vec4(vec4 vec,int n){
	int i;
	printf("[\t");
	for(i=0;i<n;++i){ printf("%f\t",vec[i]);}
	printf("]");
	return 0;
}

vec4 cross(vec4 a,vec4 b,vec4 c){
	scalar x1,y1,z1,x2,y2,z2;
	x1=a[0];	y1=a[1];	z1=a[2];	
	x2=b[0];	y2=b[1];	z2=b[2];
	c[0]=y1*z2-y2*z1;
	c[1]=z1*x2-z2*x1;
	c[2]=x1*y2-x2*y1;
	return c;
}

scalar norm(vec4 v){
	return sqrt(DOT(v,v));
}

vec4 normalize(vec4 a,vec4 n){
	scalar nrm;
	nrm=1.0/norm(a);
	SCALE(a,nrm,n)
	return n;
}

vec4 reflect(vec4 dir,vec4 normal,vec4 ref){
	scalar s;
	int i;
	s=2*DOT(dir,normal);
	EXP3(s*normal,-,dir,ref)
	return ref;
}

ray_t create_ray(void){ /* |From|Direction| 	2^3 * scalar */
	return (ray_t)malloc(sizeof(scalar)<<3);
}

triangle_t create_triangle(void){ 	/* |A|B|C|N| 	2^4 * scalar */
	return (triangle_t)malloc(sizeof(scalar)<<4);
}

sphere_t create_sphere(void){  /* |x|y|z|r| 	2^2  * scalar */
	return (sphere_t)malloc(sizeof(scalar)<<2);
}

vec4 line_hit_line(vec4 p1,vec4 d1,vec4 p2,vec4 d2,vec4 result){ /* return a vec4 result  |x1|x2|(dist)|other| where cross point cp1=p1+x1*d1, cp2=p2+x2*d2 */
#ifdef DEBUG	
	SHOW_VEC4(p1);
	SHOW_VEC4(d1);
	SHOW_VEC4(p2);
	SHOW_VEC4(d2);
#endif
	scalar a1,b1,a2,b2,c1,c2,n;
	/* compute middle variables to solve the problem: (cp1-cp2)*d1=0 &&	(cp1-cp2)*d2=0	*/
	result=sub(p2,p1,result);
	a1=dot(d1,d1);	b1=dot(d2,d1); 	c1=dot(result,d1);  /* a1*x1-b1*x2=c1 */
	a2=b1;	b2=dot(d2,d2);	c2=dot(result,d2);/* a2*x1-b2*x2=c2, where a2=dot(d1,d2)=dot(d2,d1)=b1; */
	n=(a1*b2-a2*b1);
	result[0]=(c1*b2-c2*b1)/n;
	result[1]=(c1*a2-c2*a1)/n;
#ifdef DEBUG			
	SHOW_VEC4(result);
#endif
	return result;
}

vec4 ray_hit_triangle(vec4 org, vec dir, vec4 A, vec4 BA, vec CA, vec4 N, vec4 cp, vec4 failed){
	scalar t1,t2;
	t1=DOT(dir,normal);
	EXP3(A,-,org,cp)
	t2=DOT(cp,N)
	if(t1<0&&t2<0){/* if ray.direction*tri.normal<0 and (tri.a,ray.from)*tri.normal<0 then it is possible to cross  */
		t1=t1/t2;
		OP3(ray,+,t1*dir,cp) 	/* compute the cross point of ray and the plane defined by the triangle ABC */
	/*test if the cross point is inside the tri, where cp=A+t1(C-A)+t2(B-A), if t1>=0, t2>=0, t1+t2<=1 then P is inside ABC*/
	a1=CA[0]; 	b1=BA[0];		c1=cp[0]-A[0]; 	/*	a1*x+b1*y=c1 	*/
	a2=CA[1]; 	b1=BA[1];		c2=cp[1]-A[1]; 	/* a2*x+b2*y=c2  */
	t2=a1*b2-a2*b1;
	if(t2==0.0){return failed;}
	t1=(c1*b2-c2*b1)/t2; 	t2=(c2*a1-c1*a2)/t2;
#ifdef DEBUG			
	SHOW(a1,"%f");
	SHOW(a2,"%f");
	SHOW(b1,"%f");
	SHOW(b2,"%f");
	SHOW(t1,"%f");
	SHOW(t2,"%f");
#endif
		return (t1>=0.0 && t2>=0.0 && t1+t2<=1.0)?cp:failed;
	}
	return failed;
}


vec4 ray_hit_triangle(ray_t ray,triangle_t tri,vec4 cp,vec4 failed){
	vec4 dir,normal;
	scalar t1,t2,a1,a2,b1,b2,c1,c2;
	int i;
	dir=ray+4;
	normal=tri+12;
	if((t1=dot(dir,normal))<0&&(t2=dot(sub(tri,ray,cp),normal))<0){/* if ray.direction*tri.normal<0 and (tri.a,ray.from)*tri.normal<0 then it is possible to cross  */
		/* ref.from =cross point of the ray and the plane */
		t1=t1/t2;
		/* for(i=0;i<3;++i){	cp[i]=ray[i]+t1*dir[i];	}*/
		OP3(ray,+,t1*dir,cp)
		/*test if the cross point is inside the tri, where cp=A+t1(C-A)+t2(B-A), if t1>=0, t2>=0, t1+t2<=1 then P is inside ABC*/
		a1=tri[8]-tri[0]; 	b1=tri[4]-tri[0];		c1=cp[0]-tri[0]; 	/*	a1*x+b1*y=c1 	*/
		a2=tri[9]-tri[1]; 	b1=tri[5]-tri[1];		c2=cp[1]-tri[1]; 	/* a2*x+b2*y=c2  */
		t2=a1*b2-a2*b1;
		if(t2==0.0){return failed;}
		t1=(c1*b2-c2*b1)/t2; 	t2=(c2*a1-c1*a2)/t2;
#ifdef DEBUG			
	SHOW(a1,"%f");
	SHOW(a2,"%f");
	SHOW(b1,"%f");
	SHOW(b2,"%f");
	SHOW(t1,"%f");
	SHOW(t2,"%f");
#endif
		return (t1>=0.0 && t2>=0.0 && t1+t2<=1.0)?cp:failed;
	}
	return failed;
}

vec4 ray_hit_sphere(ray_t ray,sphere_t sph,vec4 cp,vec4 failed){
	vec4 dir,normal;
	scalar t,rr;
	int i;
	dir=ray+4;
	rr=sph[4];
	OP3(sph,-,ray,cp)
	t=dot(cp,cp);
	if(t<=rr){ /* if ray.from is inside the sphere*/
		return failed;
	}
	t=dot(cp,dir);
	if(t<0){ return failed;}
	for(i=0;i<3;++i){	cp[i]=ray[i]+t*dir[i];	}
	cp=sub(sph,cp,cp);
	t=dot(cp,cp);
	if(t<=rr){ /* if the distance from sph to ray is less then r */
		t=sqrt(rr-t);
		for(i=0;i<3;++i){	cp[i]=cp[i]-t*dir[i];	}
		return cp;
	}
	return failed;
}
